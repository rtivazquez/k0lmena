import { Reporter, FullConfig, Suite, TestCase, TestResult, TestStep, FullResult, TestError } from '@playwright/test/reporter';
import { Headers } from 'got';
import { TestType, PlaywrightTestArgs, PlaywrightTestOptions, PlaywrightWorkerArgs, PlaywrightWorkerOptions } from '@playwright/test';

declare const withPerformanceTracking: (base: TestType<PlaywrightTestArgs & PlaywrightTestOptions, PlaywrightWorkerArgs & PlaywrightWorkerOptions>) => TestType<PlaywrightTestArgs & PlaywrightTestOptions, PlaywrightWorkerArgs & PlaywrightWorkerOptions>;

type Options = {
    enabled: boolean;
    testRunId: string;
    apiKey?: string;
    baseDir?: string;
    name?: string;
};
type JsonAttachment = TestResult["attachments"][0] & {
    base64?: string;
};
declare class ArtilleryReporter implements Reporter {
    private _rootDir;
    private readonly _idSymbol;
    options: Options;
    client: ArtilleryCloudClient;
    actions: Promise<any>[];
    version: string;
    constructor(options: {
        apiKey?: string;
        name?: string;
    });
    printsToStdio(): boolean;
    onBegin(config: FullConfig, suite: Suite): void;
    onTestBegin(test: TestCase, result: TestResult): void;
    onStepBegin(test: TestCase, result: TestResult, step: TestStep): void;
    onStepEnd(test: TestCase, result: TestResult, step: TestStep): void;
    onTestEnd(test: TestCase, result: TestResult): void;
    onStdErr(chunk: string | Buffer, test: TestCase, result: TestResult): void;
    onStdOut(chunk: string | Buffer, test: TestCase, result: TestResult): void;
    onEnd(result: FullResult): Promise<void>;
    onError(error: TestError): void;
    onExit(): Promise<void>;
    private generateId;
    private createTestRunEvent;
    private _parseProject;
    private _parseSuite;
    private _parseTest;
    private _onStdIO;
    _serializeAttachments(attachments: TestResult["attachments"]): JsonAttachment[];
    private _relativePath;
    private _relativeLocation;
}
declare class ArtilleryCloudClient {
    apiKey: string;
    baseUrl: string;
    whoamiEndpoint: string;
    orgId: string | null;
    getAssetUploadUrls: string;
    eventsEndpoint: string;
    defaultHeaders: Headers;
    testRunId: string;
    enabled: boolean;
    initialized: boolean;
    constructor(opts: {
        apiKey: string;
        testRunId: string;
    });
    initTestRun(opts: {
        testRunName?: string;
        metadata: any;
    }): Promise<void>;
    endTestRun({ ts, exitCode, isEarlyStop }: {
        ts: any;
        exitCode: any;
        isEarlyStop: any;
    }): Promise<void>;
    uploadAttachment(filepath: string, assetType: string, mimeType?: string): Promise<void>;
    _event(eventName: string, eventPayload: any, opts?: {
        nowait: boolean;
    }): Promise<void>;
}

export { ArtilleryReporter as default, withPerformanceTracking };
