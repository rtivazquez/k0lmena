'use strict';

const debug = require('debug')('plugin:html-report');
const urlparse = require('url').parse;
const chalk = require('chalk');
const _ = require('lodash');
const fs = require('fs');
const path = require('path');

const EXPECTATIONS = require('./expectations');
const FORMATTERS = require('./formatter');

module.exports.Plugin = HtmlReportPlugin;
module.exports.expectations = EXPECTATIONS;
module.exports.formatters = FORMATTERS;

function HtmlReportPlugin(script, events) {
  if (!global.artillery || !global.artillery.log) {
    console.error('artillery-plugin-html-report requires Artillery v2');
    return;
  }

  this.script = script;
  this.events = events;
  this.reportData = [];

  if (!script.config.processor) {
    script.config.processor = {};
  }

  script.scenarios.forEach(function (scenario) {
    scenario.afterResponse = [].concat(scenario.afterResponse || []);
    scenario.afterResponse.push('htmlReportPluginCapture');

    scenario.beforeScenario = [].concat(scenario.beforeScenario || []);
    scenario.beforeScenario.push('htmlReportPluginBeforeScenario');

    scenario.afterScenario = [].concat(scenario.afterScenario || []);
    scenario.afterScenario.push('htmlReportPluginAfterScenario');
  });

  script.config.processor.htmlReportPluginCapture = htmlReportPluginCapture;
  script.config.processor.htmlReportPluginBeforeScenario = htmlReportPluginBeforeScenario;
  script.config.processor.htmlReportPluginAfterScenario = htmlReportPluginAfterScenario;

  events.on('done', (stats) => {
    this.generateHtmlReport(stats);
  });

  debug('Initialized HTML Report Plugin');
}

function htmlReportPluginBeforeScenario(userContext, events, done) {
  userContext.htmlReportPlugin = {
    formatter: 'pretty', // Default formatter
    expectDefault200: false,
    reportFailuresAsErrors: false,
    useOnlyRequestNames: false
  };

  // You can add logic here to set these options based on script configuration

  return done();
}

function htmlReportPluginCapture(req, res, userContext, events, done) {
  debug('Capturing response');

  const expectations = _.isArray(req.expect)
    ? req.expect
    : _.map(req.expect, (v, k) => {
        const o = {};
        o[k] = v;
        return o;
      });

  const results = [];

  let body = maybeParseBody(res);
  _.each(expectations, (ex) => {
    const checker = Object.keys(ex)[0];
    debug(`checker: ${checker}`);

    let result;
    if (EXPECTATIONS[checker]) {
      result = EXPECTATIONS[checker].call(
        this,
        ex,
        body,
        req,
        res,
        userContext
      );
      results.push(result);
    } else {
      console.log(`HTML Report Plugin: Expectation '${checker}' is not supported`);
    }
  });

  const requestData = {
    name: req.name,
    url: urlparse(req.url).path,
    method: req.method,
    statusCode: res.statusCode,
    responseTime: res.timings ? res.timings.phases.total : undefined,
    results: results
  };

  userContext.htmlReportPlugin.reportData = userContext.htmlReportPlugin.reportData || [];
  userContext.htmlReportPlugin.reportData.push(requestData);

  return done();
}

function htmlReportPluginAfterScenario(userContext, events, done) {
  // You can add any after scenario logic here if needed
  return done();
}

HtmlReportPlugin.prototype.generateHtmlReport = function(stats) {
  debug('Generating HTML report');

  const reportHtml = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Artillery Test Report</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .success { color: green; }
        .failure { color: red; }
      </style>
    </head>
    <body>
      <h1>Artillery Test Report</h1>
      <h2>Summary</h2>
      <p>Total requests: ${stats.counters['vusers.created'] || 0}</p>
      <p>Failed requests: ${stats.counters['vusers.failed'] || 0}</p>
      <p>Completion rate: ${((stats.counters['vusers.completed'] || 0) / (stats.counters['vusers.created'] || 1) * 100).toFixed(2)}%</p>
      <p>Total test duration: ${stats.duration || 0} seconds</p>
      
      <h2>Requests</h2>
      ${this.reportData.map(request => `
        <h3>Request: ${request.name || request.url}</h3>
        <p>URL: ${request.url}</p>
        <p>Method: ${request.method}</p>
        <p>Status Code: ${request.statusCode}</p>
        <p>Response Time: ${request.responseTime}ms</p>
        <h4>Expectations:</h4>
        <table>
          <tr>
            <th>Type</th>
            <th>Expected</th>
            <th>Actual</th>
            <th>Result</th>
          </tr>
          ${request.results.map(result => `
            <tr>
              <td>${result.type}</td>
              <td>${result.expected}</td>
              <td>${result.got}</td>
              <td class="${result.ok ? 'success' : 'failure'}">${result.ok ? 'Pass' : 'Fail'}</td>
            </tr>
          `).join('')}
        </table>
      `).join('')}
    </body>
    </html>
  `;

  const outputPath = this.script.config.plugins['html-report'].outputPath || 'artillery_report.html';
  fs.writeFileSync(outputPath, reportHtml);
  console.log(`HTML report generated at: ${outputPath}`);
};

function maybeParseBody(res) {
  let body;
  if (
    typeof res.body === 'string' &&
    res.headers['content-type'] &&
    (res.headers['content-type'].indexOf('application/json') !== -1 ||
     res.headers['content-type'].indexOf('application/problem+json') !== -1 ||
     res.headers['content-type'].indexOf('application/ld+json') !== -1)
  ) {
    try {
      body = JSON.parse(res.body);
    } catch (err) {
      body = null;
    }

    return body;
  } else {
    return res.body;
  }
}